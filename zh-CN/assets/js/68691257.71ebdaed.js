"use strict";(self.webpackChunkopen_docs=self.webpackChunkopen_docs||[]).push([[59990],{3905:(e,n,i)=>{i.d(n,{Zo:()=>d,kt:()=>f});var t=i(67294);function l(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function o(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,t)}return i}function r(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?o(Object(i),!0).forEach((function(n){l(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function a(e,n){if(null==e)return{};var i,t,l=function(e,n){if(null==e)return{};var i,t,l={},o=Object.keys(e);for(t=0;t<o.length;t++)i=o[t],n.indexOf(i)>=0||(l[i]=e[i]);return l}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)i=o[t],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(l[i]=e[i])}return l}var u=t.createContext({}),s=function(e){var n=t.useContext(u),i=n;return e&&(i="function"==typeof e?e(n):r(r({},n),e)),i},d=function(e){var n=s(e.components);return t.createElement(u.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var i=e.components,l=e.mdxType,o=e.originalType,u=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),p=s(i),f=l,y=p["".concat(u,".").concat(f)]||p[f]||c[f]||o;return i?t.createElement(y,r(r({ref:n},d),{},{components:i})):t.createElement(y,r({ref:n},d))}));function f(e,n){var i=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var o=i.length,r=new Array(o);r[0]=p;var a={};for(var u in n)hasOwnProperty.call(n,u)&&(a[u]=n[u]);a.originalType=e,a.mdxType="string"==typeof e?e:l,r[1]=a;for(var s=2;s<o;s++)r[s]=i[s];return t.createElement.apply(null,r)}return t.createElement.apply(null,i)}p.displayName="MDXCreateElement"},25392:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>u,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>a,toc:()=>s});var t=i(87462),l=(i(67294),i(3905));const o={},r="\u573a\u666f\uff1a \u4f4d\u7f6e\u4fe1\u606f\u5c5e\u6027",a={unversionedId:"abilities/business/field/script-field-selection/sample-script-field-selection",id:"abilities/business/field/script-field-selection/sample-script-field-selection",title:"\u573a\u666f\uff1a \u4f4d\u7f6e\u4fe1\u606f\u5c5e\u6027",description:"\u573a\u666f\u63cf\u8ff0",source:"@site/i18n/zh-CN/docusaurus-plugin-content-docs/current/abilities/business/field/script-field-selection/sample-script-field-selection.mdx",sourceDirName:"abilities/business/field/script-field-selection",slug:"/abilities/business/field/script-field-selection/sample-script-field-selection",permalink:"/open-docs/zh-CN/docs/next/abilities/business/field/script-field-selection/sample-script-field-selection",draft:!1,tags:[],version:"current",lastUpdatedBy:"liupengfei",lastUpdatedAt:1690862808,formattedLastUpdatedAt:"2023\u5e748\u67081\u65e5",frontMatter:{},sidebar:"abilities",previous:{title:"\u5355\u9009/\u591a\u9009\u83dc\u5355\u5c5e\u6027",permalink:"/open-docs/zh-CN/docs/next/abilities/business/field/script-field-selection/"},next:{title:"\u6d6e\u70b9\u6570\u5c5e\u6027",permalink:"/open-docs/zh-CN/docs/next/abilities/business/field/script-field-float/"}},u={},s=[{value:"\u573a\u666f\u63cf\u8ff0",id:"\u573a\u666f\u63cf\u8ff0",level:2},{value:"\u89e3\u51b3\u65b9\u6848",id:"\u89e3\u51b3\u65b9\u6848",level:2},{value:"\u5b9e\u73b0\u601d\u8def\uff1a",id:"\u5b9e\u73b0\u601d\u8def",level:3},{value:"\u63d2\u4ef6\u5f00\u53d1",id:"\u63d2\u4ef6\u5f00\u53d1",level:2},{value:"\u7b2c\u4e00\u6b65\uff1a\u6dfb\u52a0\u5c5e\u6027\u548c\u5c5e\u6027\u7ec4",id:"\u7b2c\u4e00\u6b65\u6dfb\u52a0\u5c5e\u6027\u548c\u5c5e\u6027\u7ec4",level:3},{value:"\u7b2c\u4e8c\u6b65\uff1a\u7f16\u5199\u811a\u672c\u5c5e\u6027\u6570\u636e\u6e90\u51fd\u6570",id:"\u7b2c\u4e8c\u6b65\u7f16\u5199\u811a\u672c\u5c5e\u6027\u6570\u636e\u6e90\u51fd\u6570",level:3},{value:"\u7b2c\u4e09\u6b65\uff1a\u6dfb\u52a0\u5c5e\u6027\u503c\u81ea\u52a8\u586b\u5145\u529f\u80fd",id:"\u7b2c\u4e09\u6b65\u6dfb\u52a0\u5c5e\u6027\u503c\u81ea\u52a8\u586b\u5145\u529f\u80fd",level:3},{value:"\u7b2c\u56db\u6b65\uff1a\u6dfb\u52a0\u5c5e\u6027\u503c\u6821\u9a8c\u529f\u80fd",id:"\u7b2c\u56db\u6b65\u6dfb\u52a0\u5c5e\u6027\u503c\u6821\u9a8c\u529f\u80fd",level:3}],d={toc:s};function c(e){let{components:n,...i}=e;return(0,l.kt)("wrapper",(0,t.Z)({},d,i,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"\u573a\u666f-\u4f4d\u7f6e\u4fe1\u606f\u5c5e\u6027"},"\u573a\u666f\uff1a \u4f4d\u7f6e\u4fe1\u606f\u5c5e\u6027"),(0,l.kt)("h2",{id:"\u573a\u666f\u63cf\u8ff0"},"\u573a\u666f\u63cf\u8ff0"),(0,l.kt)("p",null,"\u5e0c\u671b\u5728\u5de5\u4f5c\u9879\u5c5e\u6027\u4e2d\u53ef\u4ee5\u8bbe\u7f6e\u4f4d\u7f6e\u4fe1\u606f\uff0c\u5305\u62ec\u56fd\u5bb6\u3001\u7701\u4efd\u548c\u57ce\u5e02\uff0c\u4e14\u8fd9\u4e9b\u5c5e\u6027\u76f8\u4e92\u4e4b\u95f4\u7b26\u5408\u771f\u5b9e\u7ea6\u675f\uff0c\u4f8b\u5982\u9009\u62e9\u4e86\u56fd\u5bb6\u4e4b\u540e\uff0c\u7701\u4efd\u7684\u53ef\u9009\u9879\u4f1a\u88ab\u9650\u5236\u5728\u56fd\u5bb6\u6240\u9009\u503c\u7684\u8303\u56f4\u5185\u3002\u5e76\u4e14\u5982\u679c\u5148\u9009\u62e9\u533a\u57df\u8f83\u5c0f\u7684\u5c5e\u6027\u80fd\u591f\u81ea\u52a8\u586b\u5145\u5bf9\u5e94\u7684\u4e0a\u7ea7\u4f4d\u7f6e\u4fe1\u606f\u3002\u6700\u540e\u63d0\u4ea4\u4fe1\u606f\u65f6\u6821\u9a8c\u4f4d\u7f6e\u4fe1\u606f\u7684\u5408\u6cd5\u6027\u3002"),(0,l.kt)("h2",{id:"\u89e3\u51b3\u65b9\u6848"},"\u89e3\u51b3\u65b9\u6848"),(0,l.kt)("h3",{id:"\u5b9e\u73b0\u601d\u8def"},"\u5b9e\u73b0\u601d\u8def\uff1a"),(0,l.kt)("p",null,"\u901a\u8fc7\u5411\u5de5\u4f5c\u9879\u4e2d\u6dfb\u52a0\u4e09\u4e2a\u5355\u9009\u7c7b\u578b\u7684\u811a\u672c\u5c5e\u6027\u6765\u8868\u8fbe\u4f4d\u7f6e\u4fe1\u606f\uff0c\u5c06\u4ed6\u4eec\u5173\u8054\u8d77\u6765\u5f62\u6210\u4e00\u4e2a\u5c5e\u6027\u7ec4\u5e76\u6dfb\u52a0\u5230\u5de5\u4f5c\u9879\u5b9e\u4f53\u4e2d\u3002"),(0,l.kt)("p",null,"\u5c5e\u6027\u5c42\u7ea7\u5173\u7cfb\u7684\u7ea6\u675f\u53ef\u4ee5\u5728\u83b7\u53d6\u9009\u9879\u503c\u65f6\u8fdb\u884c\u5224\u65ad\uff1b\u81ea\u52a8\u586b\u5145\u4e0a\u7ea7\u4f4d\u7f6e\u4fe1\u606f\u53ef\u4ee5\u4f7f\u7528\u5c5e\u6027\u503c\u8054\u52a8\u7684\u529f\u80fd\u5b9e\u73b0\uff1b\u5408\u6cd5\u6027\u6821\u9a8c\u53ef\u4ee5\u4f7f\u7528\u5c5e\u6027\u503c\u6821\u9a8c\u7684\u529f\u80fd\u8fdb\u884c\u5b9e\u73b0\u3002"),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"\u793a\u4f8b\u4e2d\u51fa\u73b0\u7684\u6570\u636e\u5e93\u76f8\u5173 API: importSQL,exec,select \u7b49\u8bf7\u53c2\u8003 ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("a",{parentName:"strong",href:"/open-docs/zh-CN/docs/next/abilities/basic/database"},"\u6570\u636e\u5e93"))," \u80fd\u529b")),(0,l.kt)("h2",{id:"\u63d2\u4ef6\u5f00\u53d1"},"\u63d2\u4ef6\u5f00\u53d1"),(0,l.kt)("h3",{id:"\u7b2c\u4e00\u6b65\u6dfb\u52a0\u5c5e\u6027\u548c\u5c5e\u6027\u7ec4"},"\u7b2c\u4e00\u6b65\uff1a\u6dfb\u52a0\u5c5e\u6027\u548c\u5c5e\u6027\u7ec4"),(0,l.kt)("p",null,"\u5728\u63d2\u4ef6\u7684",(0,l.kt)("inlineCode",{parentName:"p"},"workspace/plugin.sql"),"\u4e2d\u521d\u59cb\u5316\u6570\u636e\u5e93"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql",metastring:'title="workspace/plugin.sql"',title:'"workspace/plugin.sql"'},"CREATE TABLE IF NOT EXISTS `{{script_field}}`(\n    `id` INT(11) AUTO_INCREMENT,\n    `fieldUUID` varchar(128) CHARACTER SET latin1 NOT NULL COMMENT 'uuid',\n    `name` varchar(128) CHARACTER SET latin1 NOT NULL COMMENT 'name',\n    PRIMARY KEY (`id`)\n    ) ENGINE = InnoDB DEFAULT CHARSET=latin1 COLLATE=latin1_bin;\n\nCREATE TABLE IF NOT EXISTS `{{location}}`(\n    `id` INT(11) AUTO_INCREMENT,\n    `Country` varchar(128) CHARACTER SET latin1 NOT NULL COMMENT 'Country',\n    `Province` varchar(128) CHARACTER SET latin1 NOT NULL COMMENT 'Province',\n    `City` varchar(128) CHARACTER SET latin1 NOT NULL COMMENT 'City',\n    PRIMARY KEY (`id`)\n    ) ENGINE = InnoDB DEFAULT CHARSET=latin1 COLLATE=latin1_bin;\n\n")),(0,l.kt)("p",null,"\u5728\u63d2\u4ef6\u7684",(0,l.kt)("inlineCode",{parentName:"p"},"Install"),"\u751f\u547d\u5468\u671f\u65b9\u6cd5\u4e2d\uff0c\u6dfb\u52a0\u811a\u672c\u5c5e\u6027\uff0c\u521b\u5efa\u5c5e\u6027\u7ec4\u5e76\u6dfb\u52a0\u5230\u5de5\u4f5c\u9879\u4e2d\u3002\u5c06\u83b7\u53d6\u5230\u7684\u811a\u672c\u5c5e\u6027",(0,l.kt)("inlineCode",{parentName:"p"},"fieldUUID"),"\u6301\u4e45\u5316\u5230\u6570\u636e\u5e93\u4e2d\u4ee5\u5f85\u540e\u7eed\u4f7f\u7528\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Logger } from '@ones-op/node-logger'\nimport type { PluginRequest, PluginResponse } from '@ones-op/node-types'\nimport { exec, importSQL, select } from '@ones-op/node-database'\nimport { Field, PoolEnum } from '@ones-op/node-ability'\nexport async function Install() {\n  await importSQL('plugin.sql')\n  //\u6dfb\u52a0\u5355\u9009\u7c7b\u578b\u7684\u811a\u672c\u5c5e\u6027\u81f3\u5de5\u4f5c\u9879\n  const issueScriptField = ['Country', 'Province', 'City']\n  const fieldUUIDs: any[] = []\n  for (const fieldName of issueScriptField) {\n    const FieldsAddProjectRes = await Field.FieldsAdd({\n      Name: fieldName,\n      Type: 1001, //\u8868\u793a\u6dfb\u52a0\u5355\u9009\u7c7b\u578b\u811a\u672c\u5c5e\u6027\n    })\n    if (FieldsAddProjectRes.Error) {\n      //\u5982\u679c\u6dfb\u52a0\u5931\u8d25\uff0c\u629b\u51fa\u5f02\u5e38\n      throw new Error('Failed to create property')\n    }\n    //\u6dfb\u52a0\u6210\u529f\u8fd4\u56de\u5c5e\u6027\u7684UUID\n    const { UUID: fieldUUID } = FieldsAddProjectRes\n    fieldUUIDs.push(fieldUUID)\n    Logger.info('fieldUUID:', fieldUUID)\n\n    try {\n      const sql =\n        'INSERT into script_field(fieldUUID, name) values(\"' +\n        fieldUUID +\n        '\", \"' +\n        fieldName +\n        '\");'\n      await exec('insert', sql)\n    } catch (error) {\n      Logger.error('error: ', error)\n    }\n  }\n  //\u521b\u5efa\u5c5e\u6027\u7ec4\n  const relateionsTask: any[] = []\n  fieldUUIDs.forEach((fieldUUID, index) => {\n    const relation = {\n      FieldUUID: fieldUUID,\n      FieldParentUUID: '',\n      Position: index,\n    }\n    relateionsTask.push(relation)\n  })\n  const AddGroupFieldRes = await Field.AddGroupField({\n    ObjectType: PoolEnum.Task,\n    Name: 'Location',\n    Relations: relateionsTask,\n  })\n  Logger.info('success to create fieldGroup' + JSON.stringify(AddGroupFieldRes, undefined, 2))\n  //\u63d2\u5165\u793a\u4f8b\u6570\u636e\n  try {\n    const sql =\n      \"INSERT into location(Country, Province, City) values ('America', 'Washington', 'Seattle'), ('America', 'Washington', 'Olympia'), ('America', 'Hawaii', 'Hilo'), ('America', 'Hawaii', 'Kahului'), ('China', 'Guangdong', 'Dongguan'), ('China', 'Guangdong', 'Shenzhen'), ('China', 'SiChuan', 'Chengdu'), ('China', 'SiChuan', 'Leshan'), ('Japan', 'Tokyo', 'Hokkaido');\"\n    await exec('insert', sql)\n  } catch (error) {\n    Logger.error('error: ' + error)\n  }\n  return\n}\n")),(0,l.kt)("h3",{id:"\u7b2c\u4e8c\u6b65\u7f16\u5199\u811a\u672c\u5c5e\u6027\u6570\u636e\u6e90\u51fd\u6570"},"\u7b2c\u4e8c\u6b65\uff1a\u7f16\u5199\u811a\u672c\u5c5e\u6027\u6570\u636e\u6e90\u51fd\u6570"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"\u6dfb\u52a0\u914d\u7f6e"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="config/plugin.yaml"',title:'"config/plugin.yaml"'},"apis:\n  - type: addition\n    methods:\n      - POST\n    url: /scriptFieldSearch\n    function: GetOptions\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"\u7f16\u5199\u5904\u7406\u51fd\u6570"))),(0,l.kt)("p",null,"\u6839\u636e\u5f53\u524d\u7f16\u8f91\u7684\u5c5e\u6027\u8fd4\u56de\u54cd\u5e94\u7684\u53ef\u9009\u503c\uff0c\u5982\u679c\u5df2\u7ecf\u5177\u6709\u4e0a\u5c42\u4f4d\u7f6e\u4fe1\u606f\uff0c\u90a3\u4e48\u53ea\u8fd4\u56de\u5408\u6cd5\u7684\u9009\u9879\u503c\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"interface OptionType {\n  uuid: string\n  value: string\n}\nconst Countries: string[] = ['America', 'China', 'Japan']\nconst Provinces: string[] = ['Washington', 'Hawaii', 'Guangdong', 'SiChuan', 'Tokyo']\nconst Cities: string[] = [\n  'Seattle',\n  'Olympia',\n  'Hilo',\n  'Kahului',\n  'Dongguan',\n  'Shenzhen',\n  'Chengdu',\n  'Leshan',\n  'Hokkaido',\n]\nconst data = {\n  America: { Washington: { Seattle: {}, Olympia: {} }, Hawaii: { Hilo: {}, Kahului: {} } },\n  China: { Guangdong: { Dongguan: {}, Shenzhen: {} }, SiChuan: { Chengdu: {}, Leshan: {} } },\n  Japan: { Tokyo: { Hokkaido: {} } },\n}\n\nconst response = (options: Array<OptionType>) => {\n  return {\n    statusCode: 200,\n    body: {\n      code: 200,\n      body: {\n        options,\n      },\n    },\n  }\n}\nexport async function GetOptions(request: PluginRequest): Promise<PluginResponse> {\n  const body = request?.body\n  let field = await getFieldMap()\n  if (Array.isArray(body.uuids)) {\n    return response(body.uuids.map((uuid: string) => ({ uuid, value: uuid })))\n  } else if (Array.isArray(body.relations)) {\n    let location: any = { Country: null, Province: null, City: null }\n    let options: OptionType[] = [] //\u8fd4\u56de\u7684\u9009\u9879\u6570\u636e\n    body.relations.forEach((relation, index) => {\n      location[field.get(relation.field_uuid)] = relation.field_value\n    })\n    switch (field.get(body.field_uuid)) {\n      case 'Country':\n        return response(Countries.map((uuid) => ({ uuid, value: uuid })))\n      case 'Province':\n        if (location.Country) {\n          return response(data[location.Country].map((uuid) => ({ uuid, value: uuid })))\n        } else {\n          return response(Provinces.map((uuid) => ({ uuid, value: uuid })))\n        }\n      case 'City':\n        if (location.Province) {\n          return response(\n            data[location.Country][location.Province].map((uuid) => ({ uuid, value: uuid }))\n          )\n        } else {\n          return response(Cities.map((uuid) => ({ uuid, value: uuid })))\n        }\n      default:\n        return response([])\n    }\n  }\n  const entities = {\n    Country,\n    Province,\n    City,\n  }\n  const uuids = entities[field.get(body.field_uuid)] || []\n  return response(uuids.map((uuid: string) => ({ uuid, value: uuid })))\n}\nasync function getFieldMap(): Promise<any> {\n  let field = new Map()\n  try {\n    const sql = 'select * from script_field;'\n    const result = await select(sql)\n    result.forEach((f) => {\n      field.set(f.fieldUUID, f.name)\n      field.set(f.name, f.fieldUUID)\n    })\n  } catch (error) {\n    Logger.error('error: ' + error)\n  }\n  return field\n}\n")),(0,l.kt)("h3",{id:"\u7b2c\u4e09\u6b65\u6dfb\u52a0\u5c5e\u6027\u503c\u81ea\u52a8\u586b\u5145\u529f\u80fd"},"\u7b2c\u4e09\u6b65\uff1a\u6dfb\u52a0\u5c5e\u6027\u503c\u81ea\u52a8\u586b\u5145\u529f\u80fd"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"\u6dfb\u52a0\u914d\u7f6e"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="config/plugin.yaml"',title:'"config/plugin.yaml"'},"apis:\n  - type: addition\n    methods:\n      - POST\n    url: /groupFieldOnChange\n    function: GroupFieldOnChange\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"\u7f16\u5199\u5904\u7406\u51fd\u6570"))),(0,l.kt)("p",null,"\u5f53\u7f16\u8f91\u7684\u5c5e\u6027\u7f3a\u4e4f\u4e0a\u7ea7\u4fe1\u606f\u65f6\uff0c\u4ece\u6570\u636e\u5e93\u4e2d\u83b7\u53d6\u5bf9\u5e94\u7684\u4fe1\u606f\u5e76\u56de\u586b\u5230\u754c\u9762\u4e0a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"interface FieldValueType {\n  field_uuid: string\n  option_uuids: string[]\n}\nexport async function GroupFieldOnChange(request: PluginRequest): Promise<PluginResponse> {\n  const body = request?.body as any\n  const location: any = { Country: null, Province: null, City: null }\n  const result: FieldValueType[] = []\n  const field = await getFieldMap()\n  body.field_values.forEach((field_value) => {\n    location[field.get(field_value.field_uuid)] = field_value.option_uuids\n      ? field_value.option_uuids[0]\n      : null\n  })\n  let record: any\n  let cityRecord: any\n\n  switch (field.get(body.change_field_uuid)) {\n    case 'Country':\n      body.field_values.forEach((field_value) => {\n        let uuids: string[] = []\n        if (field_value.field_uuid == body.change_field_uuid) {\n          uuids = field_value.option_uuids\n        }\n        result.push({\n          field_uuid: field_value.field_uuid,\n          option_uuids: uuids,\n        })\n      })\n      break\n    case 'Province':\n      if (location.Province) {\n        try {\n          const sql = \"select * from location where Province='\" + location.Province + \"';\"\n          record = await select(sql)\n        } catch (error) {\n          Logger.error('error ' + error)\n        }\n        result.push({\n          field_uuid: field.get('Country'),\n          option_uuids: [record[0]['Country']],\n        })\n        result.push({\n          field_uuid: field.get('Province'),\n          option_uuids: [record[0]['Province']],\n        })\n        result.push({\n          field_uuid: field.get('City'),\n          option_uuids: [],\n        })\n      } else {\n        body.field_values.forEach((field_value) => {\n          result.push({\n            field_uuid: field_value.field_uuid,\n            option_uuids:\n              field.get('Country') === field_value.field_uuid ? field_value.option_uuids : [],\n          })\n        })\n      }\n      break\n    case 'City':\n      if (location.City) {\n        try {\n          const sql = `select * from location where City='${location.City}';`\n          cityRecord = await select(sql)\n        } catch (error) {\n          Logger.error('error ' + error)\n        }\n        result.push({\n          field_uuid: field.get('Country'),\n          option_uuids: [cityRecord[0]['Country']],\n        })\n        result.push({\n          field_uuid: field.get('Province'),\n          option_uuids: [cityRecord[0]['Province']],\n        })\n        result.push({\n          field_uuid: field.get('City'),\n          option_uuids: [cityRecord[0]['City']],\n        })\n      } else {\n        body.field_values.forEach((field_value) => {\n          result.push(field_value)\n        })\n      }\n      break\n  }\n  return {\n    statusCode: 200,\n    body: {\n      code: 200,\n      body: {\n        field_values: result,\n      },\n    },\n  }\n}\n")),(0,l.kt)("h3",{id:"\u7b2c\u56db\u6b65\u6dfb\u52a0\u5c5e\u6027\u503c\u6821\u9a8c\u529f\u80fd"},"\u7b2c\u56db\u6b65\uff1a\u6dfb\u52a0\u5c5e\u6027\u503c\u6821\u9a8c\u529f\u80fd"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"\u6dfb\u52a0\u914d\u7f6e"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="config/plugin.yaml"',title:'"config/plugin.yaml"'},"apis:\n  - type: addition\n    methods:\n      - POST\n    url: /groupFieldValidate\n    function: GroupFieldValidate\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"\u7f16\u5199\u5904\u7406\u51fd\u6570")),(0,l.kt)("p",{parentName:"li"},"\u6839\u636e\u63d2\u4ef6\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u6821\u9a8c\u6240\u6709\u4f4d\u7f6e\u4fe1\u606f\u7684\u4e0a\u4e0b\u7ea7\u5173\u7cfb\u662f\u5426\u5408\u6cd5\u3002"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"interface UpdateType {\n  field_uuid: string //\u5c5e\u6027\u7684`UUID`\n  option_uuid: string //\u5c5e\u6027\u503c\u7684`UUID`\n  option_value: string //\u5c5e\u6027\u503c\n}\nexport async function GroupFieldValidate(request: PluginRequest): Promise<PluginResponse> {\n  const body = request?.body as any\n  Logger.info(body)\n  const options: UpdateType[] = []\n  const field = await getFieldMap()\n  const location: any = { Country: null, Province: null, City: null }\n  body.field_groups[0].field_values.forEach((field_value) => {\n    if (field_value.option_uuids == null) {\n      return buildValidateFailResponse(630, 'Location information is incomplete', 'error')\n    }\n    options.push({\n      field_uuid: field_value.field_uuid,\n      option_uuid: field_value.option_uuids[0],\n      option_value: field_value.option_uuids[0],\n    })\n    location[field.get(field_value.field_uuid)] = field_value.option_uuids[0]\n  })\n  const subSqls: string[] = []\n  location.City && subSqls.push(`City='${location.City}'`)\n  location.Province && subSqls.push(`Province='${location.Province}'`)\n  location.Country && subSqls.push(`Country='${location.Country}'`)\n  const finalResult = {\n    statusCode: 200,\n    body: {\n      code: 200,\n      body: {\n        options,\n      },\n    },\n  }\n  if (subSqls.length === 0) {\n    return finalResult\n  }\n  try {\n    const sql = `select * from location where ${subSqls.join(' and ')};`\n    const record: any[] = await select(sql)\n    if (record.length === 0) {\n      return buildValidateFailResponse(630, 'Location information error', 'error')\n    }\n  } catch (error) {\n    Logger.error('error' + error)\n  }\n  return finalResult\n}\n\nfunction buildValidateFailResponse(code: number, reason: string, type: string): PluginResponse {\n  return {\n    statusCode: 200,\n    body: {\n      code: code,\n      reason: reason,\n      module: 'Plugin.FieldGroup',\n      type: type,\n    },\n  }\n}\n")))}c.isMDXComponent=!0}}]);