"use strict";(self.webpackChunkopen_docs=self.webpackChunkopen_docs||[]).push([[1986],{17942:(t,e,n)=>{n.d(e,{Zo:()=>d,kt:()=>k});var a=n(50959);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},l=Object.keys(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var p=a.createContext({}),s=function(t){var e=a.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},d=function(t){var e=s(t.components);return a.createElement(p.Provider,{value:e},t.children)},m="mdxType",u={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},c=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,l=t.originalType,p=t.parentName,d=o(t,["components","mdxType","originalType","parentName"]),m=s(n),c=r,k=m["".concat(p,".").concat(c)]||m[c]||u[c]||l;return n?a.createElement(k,i(i({ref:e},d),{},{components:n})):a.createElement(k,i({ref:e},d))}));function k(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=n.length,i=new Array(l);i[0]=c;var o={};for(var p in e)hasOwnProperty.call(e,p)&&(o[p]=e[p]);o.originalType=t,o[m]="string"==typeof t?t:r,i[1]=o;for(var s=2;s<l;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},99449:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var a=n(28957),r=(n(50959),n(17942));const l={},i="@ones-op/node-fs",o={unversionedId:"reference/packages/node-fs/node-fs",id:"reference/packages/node-fs/node-fs",title:"@ones-op/node-fs",description:"We provide a set of related interfaces for file operations, allowing plug-in developers to operate on files in the plug-in file working directory.",source:"@site/docs/reference/packages/node-fs/node-fs.mdx",sourceDirName:"reference/packages/node-fs",slug:"/reference/packages/node-fs/",permalink:"/open-docs/docs/reference/packages/node-fs/",draft:!1,tags:[],version:"current",lastUpdatedBy:"liupengfei",lastUpdatedAt:1703234094,formattedLastUpdatedAt:"Dec 22, 2023",frontMatter:{},sidebar:"reference",previous:{title:"@ones-op/node-database",permalink:"/open-docs/docs/reference/packages/node-database/"},next:{title:"@ones-op/node-third-import",permalink:"/open-docs/docs/reference/packages/node-third-import/"}},p={},s=[{value:"Requirements",id:"requirements",level:2},{value:"API",id:"api",level:2},{value:"APIs",id:"apis",level:3},{value:"Parameter",id:"parameter",level:3},{value:"1.The parameters of the API in the node-fs package are consistent with the fs of Node.js, but the following restrictions are imposed on the file and directory parameters",id:"1the-parameters-of-the-api-in-the-node-fs-package-are-consistent-with-the-fs-of-nodejs-but-the-following-restrictions-are-imposed-on-the-file-and-directory-parameters",level:4},{value:"2.The file size should not be too large, it is recommended not to exceed 500MB.",id:"2the-file-size-should-not-be-too-large-it-is-recommended-not-to-exceed-500mb",level:4},{value:"3.If you read and write large files, it is recommended to use slice|batch processing.",id:"3if-you-read-and-write-large-files-it-is-recommended-to-use-slicebatch-processing",level:4},{value:"Example",id:"example",level:3}],d={toc:s},m="wrapper";function u(t){let{components:e,...n}=t;return(0,r.kt)(m,(0,a.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"ones-opnode-fs"},"@ones-op/node-fs"),(0,r.kt)("p",null,"We provide a set of related interfaces for file operations, allowing plug-in developers to operate on files in the plug-in file working directory."),(0,r.kt)("p",null,"The node-fs package is implemented by encapsulating the ",(0,r.kt)("a",{parentName:"p",href:"https://nodejs.cn/dist/latest-v16.x/docs/api/fs.html"},"fs"),"  of Node.js. Currently, the node-fs package only supports the interface to ",(0,r.kt)("a",{parentName:"p",href:"https://nodejs.cn/dist/latest-v16.x/docs/api/fs.html#promise-api"},"promises")," in fs ."),(0,r.kt)("h2",{id:"requirements"},"Requirements"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"th"},"ONES")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"v3.14.0+")))),(0,r.kt)("h2",{id:"api"},"API"),(0,r.kt)("h3",{id:"apis"},"APIs"),(0,r.kt)("p",null,"The following is a list of APIs supported by the node-fs package:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Function"),(0,r.kt)("th",{parentName:"tr",align:null},"Illustrate"),(0,r.kt)("th",{parentName:"tr",align:null},"Support"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"access"),(0,r.kt)("td",{parentName:"tr",align:null},"access(path","[, mode]",")"),(0,r.kt)("td",{parentName:"tr",align:null},"Test the user's permissions on the file or directory specified by path."),(0,r.kt)("td",{parentName:"tr",align:null},"yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"appendFile"),(0,r.kt)("td",{parentName:"tr",align:null},"appendFile(path, data","[, options]",")"),(0,r.kt)("td",{parentName:"tr",align:null},"Asynchronously appends data to the file, creating the file if it does not already exist."),(0,r.kt)("td",{parentName:"tr",align:null},"yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"chmod"),(0,r.kt)("td",{parentName:"tr",align:null},"chmod(path, mode)"),(0,r.kt)("td",{parentName:"tr",align:null},"Change the permissions of the file."),(0,r.kt)("td",{parentName:"tr",align:null},"yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"chown"),(0,r.kt)("td",{parentName:"tr",align:null},"chown(path, uid, gid)"),(0,r.kt)("td",{parentName:"tr",align:null},"Change the owner of the file."),(0,r.kt)("td",{parentName:"tr",align:null},"yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"copyFile"),(0,r.kt)("td",{parentName:"tr",align:null},"copyFile(src, dest","[, mode]",")"),(0,r.kt)("td",{parentName:"tr",align:null},"Copies src to dest asynchronously. By default, if dest already exists, it will be overwritten."),(0,r.kt)("td",{parentName:"tr",align:null},"yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"cp"),(0,r.kt)("td",{parentName:"tr",align:null},"cp(src, dest","[, options]",")"),(0,r.kt)("td",{parentName:"tr",align:null},"Asynchronously copy the entire directory structure from src to dest, including subdirectories and files."),(0,r.kt)("td",{parentName:"tr",align:null},"yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"lchmod"),(0,r.kt)("td",{parentName:"tr",align:null},"lchmod(path, mode)"),(0,r.kt)("td",{parentName:"tr",align:null},"Change the permissions of a symbolic link. This method is only implemented on macOS."),(0,r.kt)("td",{parentName:"tr",align:null},"yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"lchown"),(0,r.kt)("td",{parentName:"tr",align:null},"lchown(path, uid, gid)"),(0,r.kt)("td",{parentName:"tr",align:null},"Change ownership on symlinks."),(0,r.kt)("td",{parentName:"tr",align:null},"yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"lutimes"),(0,r.kt)("td",{parentName:"tr",align:null},"lutimes(path, atime, mtime)"),(0,r.kt)("td",{parentName:"tr",align:null},"Change file access and modification times."),(0,r.kt)("td",{parentName:"tr",align:null},"yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"link"),(0,r.kt)("td",{parentName:"tr",align:null},"link(existingPath, newPath)"),(0,r.kt)("td",{parentName:"tr",align:null},"Create a new link from existingPath to newPath."),(0,r.kt)("td",{parentName:"tr",align:null},"yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"lstat"),(0,r.kt)("td",{parentName:"tr",align:null},"lstat(path","[, options]",")"),(0,r.kt)("td",{parentName:"tr",align:null},"Equivalent to fsPromises.stat(), except that path points to a symbolic link, in which case the link itself is counted, not the file it refers to."),(0,r.kt)("td",{parentName:"tr",align:null},"yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"mkdir"),(0,r.kt)("td",{parentName:"tr",align:null},"mkdir(path","[, options]",")"),(0,r.kt)("td",{parentName:"tr",align:null},"Create directories asynchronously."),(0,r.kt)("td",{parentName:"tr",align:null},"yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"mkdtemp"),(0,r.kt)("td",{parentName:"tr",align:null},"mkdtemp(prefix","[, options]",")"),(0,r.kt)("td",{parentName:"tr",align:null},"Create a unique temporary directory."),(0,r.kt)("td",{parentName:"tr",align:null},"yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"open"),(0,r.kt)("td",{parentName:"tr",align:null},"open(path, flags","[, mode]",")"),(0,r.kt)("td",{parentName:"tr",align:null},"open a file."),(0,r.kt)("td",{parentName:"tr",align:null},"yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"opendir"),(0,r.kt)("td",{parentName:"tr",align:null},"opendir(path","[, options]",")"),(0,r.kt)("td",{parentName:"tr",align:null},"Asynchronously opens a directory for an iterative scan."),(0,r.kt)("td",{parentName:"tr",align:null},"yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"readdir"),(0,r.kt)("td",{parentName:"tr",align:null},"readdir(path","[, options]",")"),(0,r.kt)("td",{parentName:"tr",align:null},"Read the contents of a directory."),(0,r.kt)("td",{parentName:"tr",align:null},"yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"readFile"),(0,r.kt)("td",{parentName:"tr",align:null},"readFile(path","[, options]",")"),(0,r.kt)("td",{parentName:"tr",align:null},"Read the entire contents of the file asynchronously."),(0,r.kt)("td",{parentName:"tr",align:null},"yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"readlink"),(0,r.kt)("td",{parentName:"tr",align:null},"readlink(path","[, options]",")"),(0,r.kt)("td",{parentName:"tr",align:null},"Read the contents of the symbolic link referenced by path."),(0,r.kt)("td",{parentName:"tr",align:null},"yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"realpath"),(0,r.kt)("td",{parentName:"tr",align:null},"realpath(path","[, options]",")"),(0,r.kt)("td",{parentName:"tr",align:null},"Determine the actual location of path."),(0,r.kt)("td",{parentName:"tr",align:null},"yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"rename"),(0,r.kt)("td",{parentName:"tr",align:null},"rename(oldPath, newPath)"),(0,r.kt)("td",{parentName:"tr",align:null},"Rename oldPath to newPath."),(0,r.kt)("td",{parentName:"tr",align:null},"yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"rmdir"),(0,r.kt)("td",{parentName:"tr",align:null},"rmdir(path","[, options]",")"),(0,r.kt)("td",{parentName:"tr",align:null},"Delete the directory identified by path."),(0,r.kt)("td",{parentName:"tr",align:null},"yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"rm"),(0,r.kt)("td",{parentName:"tr",align:null},"rm(path","[, options]",")"),(0,r.kt)("td",{parentName:"tr",align:null},"Delete files and directories."),(0,r.kt)("td",{parentName:"tr",align:null},"yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"stat"),(0,r.kt)("td",{parentName:"tr",align:null},"stat(path","[, options]",")"),(0,r.kt)("td",{parentName:"tr",align:null},"The fs.Stats for the given path."),(0,r.kt)("td",{parentName:"tr",align:null},"yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"symlink"),(0,r.kt)("td",{parentName:"tr",align:null},"symlink(target, path","[, type]",")"),(0,r.kt)("td",{parentName:"tr",align:null},"Create a symbolic link."),(0,r.kt)("td",{parentName:"tr",align:null},"yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"truncate"),(0,r.kt)("td",{parentName:"tr",align:null},"truncate(path","[, len]",")"),(0,r.kt)("td",{parentName:"tr",align:null},"Truncate (shorten or lengthen) the content on path to len bytes."),(0,r.kt)("td",{parentName:"tr",align:null},"yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"unlink"),(0,r.kt)("td",{parentName:"tr",align:null},"unlink(path)"),(0,r.kt)("td",{parentName:"tr",align:null},"If path points to a symbolic link, the link is removed without affecting the file or directory to which the link points. If the file path pointed to by path is not a symbolic link, delete the file."),(0,r.kt)("td",{parentName:"tr",align:null},"yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"utimes"),(0,r.kt)("td",{parentName:"tr",align:null},"utimes(path, atime, mtime)"),(0,r.kt)("td",{parentName:"tr",align:null},"Change the filesystem timestamp of the object referenced by path."),(0,r.kt)("td",{parentName:"tr",align:null},"yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"watch"),(0,r.kt)("td",{parentName:"tr",align:null},"watch(filename","[, options]",")"),(0,r.kt)("td",{parentName:"tr",align:null},"Returns an asynchronous iterator that monitors changes on filename, where filename is a file or directory."),(0,r.kt)("td",{parentName:"tr",align:null},"yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"writeFile"),(0,r.kt)("td",{parentName:"tr",align:null},"writeFile(file, data","[, options]",")"),(0,r.kt)("td",{parentName:"tr",align:null},"Asynchronously writes data to a file, replacing the file if it already exists."),(0,r.kt)("td",{parentName:"tr",align:null},"yes")))),(0,r.kt)("h3",{id:"parameter"},"Parameter"),(0,r.kt)("h4",{id:"1the-parameters-of-the-api-in-the-node-fs-package-are-consistent-with-the-fs-of-nodejs-but-the-following-restrictions-are-imposed-on-the-file-and-directory-parameters"},"1.The parameters of the API in the node-fs package are consistent with the fs of Node.js, but the following restrictions are imposed on the file and directory parameters"),(0,r.kt)("p",null,"(1) The directory or file parameter must be of string type. If the parameters are not satisfied, an error message will be given:"),(0,r.kt)("font",{color:"#FF0000"}," \xa0\xa0\xa0\xa0\xa0\xa0\"Argument of the file or directory is not assignable to parameter of type 'string'.\"")," ",(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("p",null,"(2) Directory or file parameters are not allowed to exceed the workspace directory. If the parameters are not satisfied, an error message will be given:"),(0,r.kt)("font",{color:"#FF0000"},' \xa0\xa0\xa0\xa0\xa0\xa0"Invalid Param: ../file21.txt Out of the accessible path range." ')," ",(0,r.kt)("br",null),(0,r.kt)("h4",{id:"2the-file-size-should-not-be-too-large-it-is-recommended-not-to-exceed-500mb"},"2.The file size should not be too large, it is recommended not to exceed 500MB."),(0,r.kt)("h4",{id:"3if-you-read-and-write-large-files-it-is-recommended-to-use-slicebatch-processing"},"3.If you read and write large files, it is recommended to use slice|batch processing."),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("p",null,"The use of each interface of node-fs is basically the same as the ",(0,r.kt)("a",{parentName:"p",href:"https://nodejs.cn/dist/latest-v16.x/docs/api/fs.html"},"fs")," of Node.js."),(0,r.kt)("p",null,"The following is ",(0,r.kt)("inlineCode",{parentName:"p"},"mkdir")," give as a simple example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import {Logger} from '@ones-op/node-logger'\nimport {promises} from '@ones-op/node-fs'\n\nconst dir1_name = './dir1'\nconst dir2_name = './dir1/dir2'\nconst dir3_name = './dir1/dir2/dir3'\n\nexport async function TestMkdir() {\n  try {\n        await promises.mkdir(dir1_name)\n        await promises.mkdir(dir3_name, {recursive: true})\n\n    } catch (error: any) {\n        Logger.error('[TestMkdir] error:', error.message)\n    }\n}\n")))}u.isMDXComponent=!0}}]);